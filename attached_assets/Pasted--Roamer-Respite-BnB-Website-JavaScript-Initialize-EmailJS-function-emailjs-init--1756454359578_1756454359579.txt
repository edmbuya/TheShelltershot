// Roamer Respite BnB Website JavaScript

// Initialize EmailJS
(function() {
    emailjs.init('YOUR_PUBLIC_KEY'); // This will be provided in setup instructions
})();

document.addEventListener('DOMContentLoaded', function() {
    // Initialize all components
    initializeDatePickers();
    initializePropertyFilters();
    initializeBookingFlow();
    initializeFormValidation();
    initializeSmoothScrolling();
    initializeAnimations();
    
    console.log('Roamer Respite website initialized successfully!');
});

// Date Picker Initialization
function initializeDatePickers() {
    const today = new Date();
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    // Search form date pickers
    const checkinPicker = flatpickr("#checkin", {
        minDate: "today",
        defaultDate: today,
        onChange: function(selectedDates) {
            checkoutPicker.set('minDate', selectedDates[0] || today);
        }
    });
    
    const checkoutPicker = flatpickr("#checkout", {
        minDate: tomorrow,
        defaultDate: tomorrow
    });
    
    // Booking form date pickers
    const bookingCheckinPicker = flatpickr("#bookingCheckin", {
        minDate: "today",
        defaultDate: today,
        onChange: function(selectedDates) {
            bookingCheckoutPicker.set('minDate', selectedDates[0] || today);
            updateBookingSummary();
        }
    });
    
    const bookingCheckoutPicker = flatpickr("#bookingCheckout", {
        minDate: tomorrow,
        defaultDate: tomorrow,
        onChange: function() {
            updateBookingSummary();
        }
    });
}

// Property Filter System
function initializePropertyFilters() {
    const filterButtons = document.querySelectorAll('[data-filter]');
    const propertyItems = document.querySelectorAll('.property-item');
    
    filterButtons.forEach(button => {
        button.addEventListener('click', function() {
            const filter = this.getAttribute('data-filter');
            
            // Update active button
            filterButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            
            // Filter properties
            propertyItems.forEach(item => {
                if (filter === 'all' || item.getAttribute('data-category') === filter) {
                    item.style.display = 'block';
                    setTimeout(() => {
                        item.style.opacity = '1';
                        item.style.transform = 'translateY(0)';
                    }, 100);
                } else {
                    item.style.opacity = '0';
                    item.style.transform = 'translateY(20px)';
                    setTimeout(() => {
                        item.style.display = 'none';
                    }, 300);
                }
            });
        });
    });
}

// Booking Flow Management
function initializeBookingFlow() {
    // Handle property selection buttons
    const bookPropertyButtons = document.querySelectorAll('.book-property-btn');
    bookPropertyButtons.forEach(button => {
        button.addEventListener('click', function() {
            const property = this.getAttribute('data-property');
            const price = this.getAttribute('data-price');
            
            // Set the property in the booking form
            const propertySelect = document.getElementById('selectedProperty');
            propertySelect.value = `${property}|${price}`;
            
            // Scroll to booking section
            document.getElementById('booking').scrollIntoView({ behavior: 'smooth' });
            
            // Update summary
            updateBookingSummary();
        });
    });
    
    // Handle property selection change
    document.getElementById('selectedProperty').addEventListener('change', updateBookingSummary);
    document.getElementById('guestCount').addEventListener('change', updateBookingSummary);
}

// Update Booking Summary
function updateBookingSummary() {
    const propertySelect = document.getElementById('selectedProperty');
    const checkinDate = document.getElementById('bookingCheckin').value;
    const checkoutDate = document.getElementById('bookingCheckout').value;
    const guestCount = document.getElementById('guestCount').value;
    
    if (!propertySelect.value || !checkinDate || !checkoutDate) {
        document.getElementById('bookingSummary').style.display = 'none';
        return;
    }
    
    const [propertyName, pricePerNight] = propertySelect.value.split('|');
    const checkin = new Date(checkinDate);
    const checkout = new Date(checkoutDate);
    const nights = Math.ceil((checkout - checkin) / (1000 * 60 * 60 * 24));
    const totalPrice = nights * parseInt(pricePerNight);
    
    // Update summary display
    document.getElementById('summaryProperty').textContent = propertyName;
    document.getElementById('summaryDates').textContent = `${checkin.toLocaleDateString()} - ${checkout.toLocaleDateString()}`;
    document.getElementById('summaryNights').textContent = `${nights} night${nights > 1 ? 's' : ''}`;
    document.getElementById('summaryRate').textContent = `$${parseInt(pricePerNight).toLocaleString()}`;
    document.getElementById('summaryTotal').textContent = `$${totalPrice.toLocaleString()}`;
    
    document.getElementById('bookingSummary').style.display = 'block';
}

// Booking Step Navigation
function nextStep(stepNumber) {
    // Validate current step
    const currentStep = document.querySelector('.booking-step.active');
    const currentStepNumber = parseInt(currentStep.id.replace('step', ''));
    
    if (!validateStep(currentStepNumber)) {
        return;
    }
    
    // Hide current step
    currentStep.classList.remove('active');
    
    // Show next step
    document.getElementById(`step${stepNumber}`).classList.add('active');
    
    // Update step indicator
    updateStepIndicator(stepNumber);
    
    // Update final summary if going to step 3
    if (stepNumber === 3) {
        updateFinalSummary();
    }
}

function previousStep(stepNumber) {
    // Hide current step
    document.querySelector('.booking-step.active').classList.remove('active');
    
    // Show previous step
    document.getElementById(`step${stepNumber}`).classList.add('active');
    
    // Update step indicator
    updateStepIndicator(stepNumber);
}

function updateStepIndicator(activeStep) {
    const steps = document.querySelectorAll('.step');
    steps.forEach((step, index) => {
        if (index + 1 <= activeStep) {
            step.classList.add('active');
        } else {
            step.classList.remove('active');
        }
    });
}

function validateStep(stepNumber) {
    switch(stepNumber) {
        case 1:
            const property = document.getElementById('selectedProperty').value;
            const checkin = document.getElementById('bookingCheckin').value;
            const checkout = document.getElementById('bookingCheckout').value;
            const guests = document.getElementById('guestCount').value;
            
            if (!property || !checkin || !checkout || !guests) {
                showAlert('Please fill in all required fields before continuing.', 'warning');
                return false;
            }
            
            const checkinDate = new Date(checkin);
            const checkoutDate = new Date(checkout);
            if (checkoutDate <= checkinDate) {
                showAlert('Check-out date must be after check-in date.', 'warning');
                return false;
            }
            
            return true;
            
        case 2:
            const firstName = document.getElementById('firstName').value;
            const lastName = document.getElementById('lastName').value;
            const email = document.getElementById('email').value;
            const phone = document.getElementById('phone').value;
            
            if (!firstName || !lastName || !email || !phone) {
                showAlert('Please fill in all required guest details.', 'warning');
                return false;
            }
            
            if (!isValidEmail(email)) {
                showAlert('Please enter a valid email address.', 'warning');
                return false;
            }
            
            return true;
            
        default:
            return true;
    }
}

function updateFinalSummary() {
    const propertySelect = document.getElementById('selectedProperty');
    const [propertyName, pricePerNight] = propertySelect.value.split('|');
    const checkin = new Date(document.getElementById('bookingCheckin').value);
    const checkout = new Date(document.getElementById('bookingCheckout').value);
    const nights = Math.ceil((checkout - checkin) / (1000 * 60 * 60 * 24));
    const totalPrice = nights * parseInt(pricePerNight);
    const firstName = document.getElementById('firstName').value;
    const lastName = document.getElementById('lastName').value;
    const email = document.getElementById('email').value;
    const phone = document.getElementById('phone').value;
    
    const summaryHTML = `
        <div class="summary-item">
            <span>Guest:</span>
            <span>${firstName} ${lastName}</span>
        </div>
        <div class="summary-item">
            <span>Email:</span>
            <span>${email}</span>
        </div>
        <div class="summary-item">
            <span>Phone:</span>
            <span>${phone}</span>
        </div>
        <div class="summary-item">
            <span>Property:</span>
            <span>${propertyName}</span>
        </div>
        <div class="summary-item">
            <span>Dates:</span>
            <span>${checkin.toLocaleDateString()} - ${checkout.toLocaleDateString()}</span>
        </div>
        <div class="summary-item">
            <span>Nights:</span>
            <span>${nights} night${nights > 1 ? 's' : ''}</span>
        </div>
        <div class="summary-item">
            <span>Rate per night:</span>
            <span>$${parseInt(pricePerNight).toLocaleString()}</span>
        </div>
        <div class="summary-item total">
            <span>Total Amount:</span>
            <span>$${totalPrice.toLocaleString()}</span>
        </div>
    `;
    
    document.getElementById('finalSummary').innerHTML = summaryHTML;
}

// Complete Booking
function completeBooking() {
    const termsCheckbox = document.getElementById('termsAgree');
    const paymentMethod = document.querySelector('input[name="payment"]:checked');
    
    if (!termsCheckbox.checked) {
        showAlert('Please agree to the Terms and Conditions to continue.', 'warning');
        return;
    }
    
    if (!paymentMethod) {
        showAlert('Please select a payment method.', 'warning');
        return;
    }
    
    const bookingBtn = document.getElementById('completeBookingBtn');
    bookingBtn.classList.add('loading');
    bookingBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Processing...';
    
    // Send booking notification email and process booking
    sendBookingNotificationEmail()
        .then(() => {
            // Get booking details
            const propertySelect = document.getElementById('selectedProperty');
            const [propertyName, pricePerNight] = propertySelect.value.split('|');
            const totalPrice = calculateTotalPrice();
            const paymentMethodText = getPaymentMethodText(paymentMethod.value);
            
            // Show success message
            showSuccessModal(propertyName, totalPrice, paymentMethodText);
            
            // Reset button
            bookingBtn.classList.remove('loading');
            bookingBtn.innerHTML = '<i class="fas fa-credit-card me-2"></i>Complete Booking & Pay';
            
            // Reset form after delay
            setTimeout(() => {
                resetBookingForm();
            }, 3000);
        })
        .catch(error => {
            console.error('Error sending notification:', error);
            // Still show success to user, but log the error
            const propertySelect = document.getElementById('selectedProperty');
            const [propertyName, pricePerNight] = propertySelect.value.split('|');
            const totalPrice = calculateTotalPrice();
            const paymentMethodText = getPaymentMethodText(paymentMethod.value);
            
            showSuccessModal(propertyName, totalPrice, paymentMethodText);
            
            bookingBtn.classList.remove('loading');
            bookingBtn.innerHTML = '<i class="fas fa-credit-card me-2"></i>Complete Booking & Pay';
            
            setTimeout(() => {
                resetBookingForm();
            }, 3000);
        });
}

function calculateTotalPrice() {
    const propertySelect = document.getElementById('selectedProperty');
    const [, pricePerNight] = propertySelect.value.split('|');
    const checkin = new Date(document.getElementById('bookingCheckin').value);
    const checkout = new Date(document.getElementById('bookingCheckout').value);
    const nights = Math.ceil((checkout - checkin) / (1000 * 60 * 60 * 24));
    return nights * parseInt(pricePerNight);
}

function getPaymentMethodText(method) {
    switch(method) {
        case 'mpesa': return 'M-Pesa';
        case 'card': return 'Credit/Debit Card';
        case 'paypal': return 'PayPal';
        default: return 'Selected Payment Method';
    }
}

function showSuccessModal(propertyName, totalPrice, paymentMethod) {
    const modalHTML = `
        <div class="modal fade" id="bookingSuccessModal" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header bg-success text-white">
                        <h5 class="modal-title">
                            <i class="fas fa-check-circle me-2"></i>
                            Booking Confirmed!
                        </h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body text-center">
                        <div class="success-icon mb-3">
                            <i class="fas fa-check-circle text-success" style="font-size: 4rem;"></i>
                        </div>
                        <h4>Thank You!</h4>
                        <p class="lead">Your booking for <strong>${propertyName}</strong> has been confirmed.</p>
                        <div class="booking-details bg-light p-3 rounded">
                            <p><strong>Total Amount:</strong> $${totalPrice.toLocaleString()}</p>
                            <p><strong>Payment Method:</strong> ${paymentMethod}</p>
                            <p><strong>Booking Reference:</strong> YH${Date.now().toString().slice(-6)}</p>
                        </div>
                        <p class="text-muted mt-3">
                            You will receive a confirmation email shortly with all the details and check-in instructions.
                        </p>
                        <div class="mt-4">
                            <a href="https://wa.me/254740062654?text=Hello! I just completed a booking (Ref: YH${Date.now().toString().slice(-6)}) and would like to confirm the details." target="_blank" class="btn btn-success">
                                <i class="fab fa-whatsapp me-2"></i>
                                Contact us on WhatsApp
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // Remove existing modal if any
    const existingModal = document.getElementById('bookingSuccessModal');
    if (existingModal) {
        existingModal.remove();
    }
    
    // Add modal to body
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    // Show modal
    const modal = new bootstrap.Modal(document.getElementById('bookingSuccessModal'));
    modal.show();
}

function resetBookingForm() {
    // Reset to step 1
    document.querySelectorAll('.booking-step').forEach(step => step.classList.remove('active'));
    document.getElementById('step1').classList.add('active');
    updateStepIndicator(1);
    
    // Clear all form fields
    document.getElementById('selectedProperty').value = '';
    document.getElementById('guestCount').value = '1';
    document.getElementById('bookingCheckin').value = '';
    document.getElementById('bookingCheckout').value = '';
    document.getElementById('firstName').value = '';
    document.getElementById('lastName').value = '';
    document.getElementById('email').value = '';
    document.getElementById('phone').value = '';
    document.getElementById('specialRequests').value = '';
    document.getElementById('termsAgree').checked = false;
    
    // Hide booking summary
    document.getElementById('bookingSummary').style.display = 'none';
}

// Email Notification Function
async function sendBookingNotificationEmail() {
    try {
        // Get all booking details
        const propertySelect = document.getElementById('selectedProperty');
        const [propertyName, pricePerNight] = propertySelect.value.split('|');
        const checkin = new Date(document.getElementById('bookingCheckin').value);
        const checkout = new Date(document.getElementById('bookingCheckout').value);
        const nights = Math.ceil((checkout - checkin) / (1000 * 60 * 60 * 24));
        const totalPrice = nights * parseInt(pricePerNight);
        const firstName = document.getElementById('firstName').value;
        const lastName = document.getElementById('lastName').value;
        const email = document.getElementById('email').value;
        const phone = document.getElementById('phone').value;
        const guests = document.getElementById('guestCount').value;
        const specialRequests = document.getElementById('specialRequests').value || 'None';
        const paymentMethod = document.querySelector('input[name="payment"]:checked').value;
        const bookingReference = 'YH' + Date.now().toString().slice(-6);
        
        // Email template parameters
        const templateParams = {
            to_email: 'Roamersrespite1@gmail.com',
            to_name: 'Roamer Respite Team',
            subject: `New Booking: ${propertyName} - ${bookingReference}`,
            booking_reference: bookingReference,
            guest_name: `${firstName} ${lastName}`,
            guest_email: email,
            guest_phone: phone,
            property_name: propertyName,
            checkin_date: checkin.toLocaleDateString('en-US', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
            }),
            checkout_date: checkout.toLocaleDateString('en-US', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
            }),
            nights: nights,
            guests: guests,
            rate_per_night: `$${parseInt(pricePerNight).toLocaleString()}`,
            total_amount: `$${totalPrice.toLocaleString()}`,
            payment_method: getPaymentMethodText(paymentMethod),
            special_requests: specialRequests,
            booking_datetime: new Date().toLocaleString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            })
        };

        // Send email using EmailJS
        const response = await emailjs.send(
            'YOUR_SERVICE_ID', // Will be provided in setup instructions
            'YOUR_TEMPLATE_ID', // Will be provided in setup instructions
            templateParams
        );

        console.log('Booking notification sent successfully:', response);
        return response;
        
    } catch (error) {
        console.error('Failed to send booking notification:', error);
        throw error;
    }
}

// Form Validation
function initializeFormValidation() {
    // Search form validation
    document.getElementById('searchForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const location = document.getElementById('location').value;
        const roomType = document.getElementById('roomType').value;
        const checkin = document.getElementById('checkin').value;
        const checkout = document.getElementById('checkout').value;
        
        if (!location || !roomType || !checkin || !checkout) {
            showAlert('Please fill in all search criteria.', 'warning');
            return;
        }
        
        // Simulate search
        showAlert('Searching for properties...', 'info');
        
        setTimeout(() => {
            // Filter properties based on room type
            const filterButton = document.querySelector(`[data-filter="${roomType}"]`);
            if (filterButton) {
                filterButton.click();
            }
            
            // Scroll to properties section
            document.getElementById('properties').scrollIntoView({ behavior: 'smooth' });
            
            showAlert(`Found properties matching your criteria!`, 'success');
        }, 1500);
    });
    
    // Contact form validation
    document.getElementById('contactForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const name = this.querySelector('input[placeholder="Your Name"]').value;
        const email = this.querySelector('input[placeholder="Your Email"]').value;
        const subject = this.querySelector('input[placeholder="Subject"]').value;
        const message = this.querySelector('textarea').value;
        
        if (!name || !email || !subject || !message) {
            showAlert('Please fill in all fields.', 'warning');
            return;
        }
        
        if (!isValidEmail(email)) {
            showAlert('Please enter a valid email address.', 'warning');
            return;
        }
        
        // Simulate form submission
        const submitBtn = this.querySelector('button[type="submit"]');
        submitBtn.classList.add('loading');
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Sending...';
        
        setTimeout(() => {
            showAlert('Thank you for your message! We will get back to you soon.', 'success');
            this.reset();
            submitBtn.classList.remove('loading');
            submitBtn.innerHTML = '<i class="fas fa-paper-plane me-2"></i>Send Message';
        }, 2000);
    });
}

// Utility Functions
function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

function showAlert(message, type) {
    // Remove existing alerts
    const existingAlerts = document.querySelectorAll('.custom-alert');
    existingAlerts.forEach(alert => alert.remove());
    
    // Create alert element
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show custom-alert`;
    alertDiv.style.cssText = 'position: fixed; top: 100px; right: 20px; z-index: 9999; min-width: 300px;';
    
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    // Add to document
    document.body.appendChild(alertDiv);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        if (alertDiv.parentNode) {
            alertDiv.remove();
        }
    }, 5000);
}

// Smooth Scrolling
function initializeSmoothScrolling() {
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            
            const targetId = this.getAttribute('href');
            const targetSection = document.querySelector(targetId);
            
            if (targetSection) {
                const offsetTop = targetSection.offsetTop - 80; // Account for fixed navbar
                
                window.scrollTo({
                    top: offsetTop,
                    behavior: 'smooth'
                });
            }
        });
    });
}

// Scroll Animations
function initializeAnimations() {
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
            }
        });
    }, observerOptions);
    
    // Add fade-in class to elements
    const elementsToAnimate = document.querySelectorAll('.service-card, .property-card, .contact-item');
    elementsToAnimate.forEach((el, index) => {
        el.classList.add('fade-in');
        el.style.transitionDelay = `${index * 0.1}s`;
        observer.observe(el);
    });
}

// Navigation Active State
window.addEventListener('scroll', function() {
    const sections = document.querySelectorAll('section[id]');
    const navLinks = document.querySelectorAll('.nav-link');
    
    let current = '';
    sections.forEach(section => {
        const sectionTop = section.offsetTop - 100;
        const sectionHeight = section.offsetHeight;
        
        if (window.scrollY >= sectionTop && window.scrollY < sectionTop + sectionHeight) {
            current = section.getAttribute('id');
        }
    });
    
    navLinks.forEach(link => {
        link.classList.remove('active');
        if (link.getAttribute('href') === `#${current}`) {
            link.classList.add('active');
        }
    });
});

// Navbar Background on Scroll
window.addEventListener('scroll', function() {
    const navbar = document.querySelector('.navbar');
    if (window.scrollY > 50) {
        navbar.style.background = 'rgba(255, 255, 255, 0.98)';
        navbar.style.backdropFilter = 'blur(10px)';
    } else {
        navbar.style.background = 'rgba(255, 255, 255, 0.95)';
    }
});

// WhatsApp Integration
document.addEventListener('DOMContentLoaded', function() {
    const whatsappLinks = document.querySelectorAll('a[href*="wa.me"]');
    whatsappLinks.forEach(link => {
        link.addEventListener('click', function() {
            // Track WhatsApp click (you could integrate analytics here)
            console.log('WhatsApp chat initiated');
        });
    });
});

// Error Handling
window.addEventListener('error', function(e) {
    console.error('An error occurred:', e.error);
    showAlert('Something went wrong. Please refresh the page and try again.', 'danger');
});

// Performance Optimization
document.addEventListener('DOMContentLoaded', function() {
    // Lazy load images
    const images = document.querySelectorAll('img[src]');
    images.forEach(img => {
        img.loading = 'lazy';
    });
    
    // Preload critical resources
    const criticalImages = [
        'https://pixabay.com/get/g9db81414f344fd513a5440195e244977e5f7aff61d987f76c1ecd39e9eb6dd32f6fb615678789e3fadc9ba0f0646719459e86274defd9b7650e76ec072ff5f6d_1280.jpg'
    ];
    
    criticalImages.forEach(src => {
        const link = document.createElement('link');
        link.rel = 'preload';
        link.as = 'image';
        link.href = src;
        document.head.appendChild(link);
    });
});

console.log('Roamer Respite BnB Website - All systems ready! 🏠✨');